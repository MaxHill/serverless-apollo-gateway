{
  "service": {
    "service": "feature-flag",
    "serviceObject": {
      "name": "feature-flag"
    },
    "provider": {
      "name": "aws",
      "region": "eu-north-1",
      "runtime": "nodejs14.x",
      "stage": "dev",
      "profile": "feature-flags",
      "lambdaHashingVersion": "20201221",
      "environment": {
        "APOLLO_CONFIG_HOME": "/tmp/",
        "SUPERGRAPH_BUCKET_NAME": "feature-flag-dev-supergraph",
        "SUPERGRAPH_FILE_NAME": "supergraph.txt",
        "SUPERGRAPH_BUCKET_ARN": {
          "Fn::Join": [
            "",
            [
              {
                "Fn::GetAtt": [
                  "supergraphBucket",
                  "Arn"
                ]
              },
              "/*"
            ]
          ]
        },
        "DOMAIN_SUFFIX": "domainsuffixthatisunique",
        "API_KEY": "THIS_SHOULD_BE_GENERATED_MORE_SAFELY",
        "API_URL": {
          "Fn::Join": [
            "",
            [
              "https://",
              {
                "Ref": "ApiGatewayRestApi"
              },
              ".execute-api.",
              "eu-north-1",
              ".amazonaws.com/",
              "dev"
            ]
          ]
        }
      },
      "apiGateway": {
        "apiKeys": [
          {
            "name": "feature-flag-dev-apiKey",
            "value": "THIS_SHOULD_BE_GENERATED_MORE_SAFELY"
          }
        ]
      },
      "httpApi": {
        "authorizers": {
          "serviceAuthorizer": {
            "identitySource": "$request.header.Authorization",
            "issuerUrl": {
              "Fn::Join": [
                "",
                [
                  "https://cognito-idp.",
                  "eu-north-1",
                  ".amazonaws.com/",
                  {
                    "Ref": "serviceUserPool"
                  }
                ]
              ]
            },
            "audience": [
              {
                "Ref": "serviceUserPoolClient"
              }
            ]
          }
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/feature-flag-dev-gateway"
            }
          },
          "HelloLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/feature-flag-dev-hello"
            }
          },
          "BuildSchemaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/feature-flag-dev-buildSchema"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "feature-flag",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/feature-flag-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/feature-flag-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "feature-flag",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RoverLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/feature-flag/dev/1639936626195-2021-12-19T17:57:06.195Z/rover.zip"
              },
              "LayerName": "dev-rover-layer",
              "Description": "Include rover-layer"
            }
          },
          "GatewayLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/feature-flag/dev/1640106249502-2021-12-21T17:04:09.502Z/feature-flag-dev-gateway.zip"
              },
              "Handler": "src/functions/gateway.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "feature-flag-dev-gateway",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "APOLLO_CONFIG_HOME": "/tmp/",
                  "SUPERGRAPH_BUCKET_NAME": "feature-flag-dev-supergraph",
                  "SUPERGRAPH_FILE_NAME": "supergraph.txt",
                  "SUPERGRAPH_BUCKET_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SUPERGRAPH_BUCKET_ARN\"]"
                  },
                  "DOMAIN_SUFFIX": "domainsuffixthatisunique",
                  "API_KEY": "THIS_SHOULD_BE_GENERATED_MORE_SAFELY",
                  "API_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"API_URL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "GatewayIamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GatewayIamRoleLambdaExecution",
              "GatewayLogGroup"
            ]
          },
          "HelloLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/feature-flag/dev/1640106249502-2021-12-21T17:04:09.502Z/feature-flag-dev-hello.zip"
              },
              "Handler": "src/functions/hello.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "feature-flag-dev-hello",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "APOLLO_CONFIG_HOME": "/tmp/",
                  "SUPERGRAPH_BUCKET_NAME": "feature-flag-dev-supergraph",
                  "SUPERGRAPH_FILE_NAME": "supergraph.txt",
                  "SUPERGRAPH_BUCKET_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SUPERGRAPH_BUCKET_ARN\"]"
                  },
                  "DOMAIN_SUFFIX": "domainsuffixthatisunique",
                  "API_KEY": "THIS_SHOULD_BE_GENERATED_MORE_SAFELY",
                  "API_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"API_URL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "HelloLogGroup"
            ]
          },
          "BuildSchemaLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/feature-flag/dev/1640106249502-2021-12-21T17:04:09.502Z/feature-flag-dev-buildSchema.zip"
              },
              "Handler": "src/functions/buildSchema.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "feature-flag-dev-buildSchema",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "APOLLO_CONFIG_HOME": "/tmp/",
                  "SUPERGRAPH_BUCKET_NAME": "feature-flag-dev-supergraph",
                  "SUPERGRAPH_FILE_NAME": "supergraph.txt",
                  "SUPERGRAPH_BUCKET_ARN": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"SUPERGRAPH_BUCKET_ARN\"]"
                  },
                  "DOMAIN_SUFFIX": "domainsuffixthatisunique",
                  "API_KEY": "THIS_SHOULD_BE_GENERATED_MORE_SAFELY",
                  "API_URL": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"API_URL\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "BuildSchemaIamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "RoverLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "BuildSchemaIamRoleLambdaExecution",
              "BuildSchemaLogGroup"
            ]
          },
          "HelloLambdaVersionQh28O4n9mX8D49jqRGKMUtJYk5qnaC1Lnhzqe6o4q0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "HelloLambdaFunction"
              },
              "CodeSha256": "46lEyiUkU5cWKk+hA58t/M+shKk5cKFjrI85bhxOePw="
            }
          },
          "GatewayLambdaVersionS4m1AL5kwtJbc8dEx6YgqoTV4gZVnanVtQT6rMr6g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GatewayLambdaFunction"
              },
              "CodeSha256": "f9eKfgxn9URw8dMv3ZYSxKfbn/V05d2daSr0Ylz4e0o="
            }
          },
          "BuildSchemaLambdaVersionT9XPWLhejB5xhqr03sWBmau1diYZPKIimM06PCvfQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BuildSchemaLambdaFunction"
              },
              "CodeSha256": "DJoYxWyHqzdqWIKfNDit08IoowZ+roeteppWw3JUVzk="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-feature-flag",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceHello": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "hello",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBuildDashschema": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "build-schema",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodHelloPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HelloLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodHelloGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceHello"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "HelloLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "HelloLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBuildDashschemaGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBuildDashschema"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": true,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BuildSchemaLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BuildSchemaLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1640106243182": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodHelloPost",
              "ApiGatewayMethodHelloGet",
              "ApiGatewayMethodBuildDashschemaGet"
            ]
          },
          "ApiGatewayApiKey1": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
              "Enabled": true,
              "Name": "feature-flag-dev-apiKey",
              "Value": "THIS_SHOULD_BE_GENERATED_MORE_SAFELY",
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "dev"
                }
              ]
            },
            "DependsOn": "ApiGatewayDeployment1640106243182"
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1640106243182",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "dev"
                }
              ],
              "Description": "Usage plan for feature-flag dev stage",
              "UsagePlanName": "feature-flag-dev"
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          },
          "HelloLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "HelloLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BuildSchemaLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BuildSchemaLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-feature-flag",
              "ProtocolType": "HTTP"
            },
            "DependsOn": [
              "serviceUserPool"
            ]
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "HttpApiAuthorizerServiceAuthorizer": {
            "Type": "AWS::ApiGatewayV2::Authorizer",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "Name": "serviceAuthorizer",
              "IdentitySource": [
                "$request.header.Authorization"
              ],
              "AuthorizerType": "JWT",
              "JwtConfiguration": {
                "Audience": [
                  {
                    "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"serviceAuthorizer\"][\"audience\"][0]"
                  }
                ],
                "Issuer": {
                  "$ref": "$[\"service\"][\"provider\"][\"httpApi\"][\"authorizers\"][\"serviceAuthorizer\"][\"issuerUrl\"]"
                }
              }
            }
          },
          "GatewayLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GatewayLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGateway": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GatewayLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 6500
            }
          },
          "HttpApiRoutePostGraphql": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /graphql",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGateway"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerServiceAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGateway"
          },
          "HttpApiRouteGetGraphql": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /graphql",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGateway"
                    }
                  ]
                ]
              },
              "AuthorizationType": "JWT",
              "AuthorizerId": {
                "Ref": "HttpApiAuthorizerServiceAuthorizer"
              }
            },
            "DependsOn": "HttpApiIntegrationGateway"
          },
          "GatewayIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "feature-flag",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/feature-flag-dev-gateway:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:GetObject"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "supergraphBucket",
                                  "Arn"
                                ]
                              },
                              "/*"
                            ]
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "feature-flag-role-gateway",
              "ManagedPolicyArns": []
            }
          },
          "BuildSchemaIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "feature-flag",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/feature-flag-dev-buildSchema:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject"
                        ],
                        "Resource": {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "supergraphBucket",
                                  "Arn"
                                ]
                              },
                              "/*"
                            ]
                          ]
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "apigateway:GET"
                        ],
                        "Resource": "arn:aws:apigateway:eu-north-1::/apikeys/*"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": "feature-flag-role-buildSchema",
              "ManagedPolicyArns": []
            }
          },
          "supergraphBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "feature-flag-dev-supergraph"
            }
          },
          "serviceUserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "service-user-pool-dev",
              "UsernameAttributes": [
                "email"
              ],
              "AutoVerifiedAttributes": [
                "email"
              ]
            }
          },
          "serviceUserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "service-user-pool-client-dev",
              "AllowedOAuthFlows": [
                "implicit"
              ],
              "AllowedOAuthFlowsUserPoolClient": true,
              "AllowedOAuthScopes": [
                "phone",
                "email",
                "openid",
                "profile",
                "aws.cognito.signin.user.admin"
              ],
              "UserPoolId": {
                "Ref": "serviceUserPool"
              },
              "CallbackURLs": [
                "https://localhost:3000"
              ],
              "ExplicitAuthFlows": [
                "ALLOW_USER_PASSWORD_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "GenerateSecret": false,
              "SupportedIdentityProviders": [
                "COGNITO"
              ]
            }
          },
          "serviceUserPoolDomain": {
            "Type": "AWS::Cognito::UserPoolDomain",
            "Properties": {
              "UserPoolId": {
                "Ref": "serviceUserPool"
              },
              "Domain": "service-user-pool-domain-dev-domainsuffixthatisunique"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-feature-flag-dev-ServerlessDeploymentBucketName"
            }
          },
          "RoverLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "RoverLambdaLayer"
            },
            "Export": {
              "Name": "sls-feature-flag-dev-RoverLambdaLayerQualifiedArn"
            }
          },
          "RoverLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "efcaa1773031ccf36fedaae823d57230a47f9f5c",
            "Export": {
              "Name": "sls-feature-flag-dev-RoverLambdaLayerHash"
            }
          },
          "RoverLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/feature-flag/dev/1639936626195-2021-12-19T17:57:06.195Z/rover.zip",
            "Export": {
              "Name": "sls-feature-flag-dev-RoverLambdaLayerS3Key"
            }
          },
          "HelloLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "HelloLambdaVersionQh28O4n9mX8D49jqRGKMUtJYk5qnaC1Lnhzqe6o4q0"
            },
            "Export": {
              "Name": "sls-feature-flag-dev-HelloLambdaFunctionQualifiedArn"
            }
          },
          "GatewayLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GatewayLambdaVersionS4m1AL5kwtJbc8dEx6YgqoTV4gZVnanVtQT6rMr6g"
            },
            "Export": {
              "Name": "sls-feature-flag-dev-GatewayLambdaFunctionQualifiedArn"
            }
          },
          "BuildSchemaLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BuildSchemaLambdaVersionT9XPWLhejB5xhqr03sWBmau1diYZPKIimM06PCvfQ"
            },
            "Export": {
              "Name": "sls-feature-flag-dev-BuildSchemaLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-feature-flag-dev-ServiceEndpoint"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-feature-flag-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-feature-flag-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "stage": "dev",
      "stackName": "feature-flag-dev",
      "scripts": {
        "hooks": {
          "deploy:finalize": "sls invoke -f buildSchema -s dev"
        }
      },
      "esbuild": {
        "loader": {
          ".yml": "text",
          ".yaml": "text",
          ".gql": "text",
          ".graphql": "text"
        }
      },
      "s3Buckets": {
        "supergraph": {
          "name": "feature-flag-dev-supergraph",
          "arn": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "supergraphBucket",
                    "Arn"
                  ]
                },
                "/*"
              ]
            ]
          }
        }
      }
    },
    "plugins": [
      "serverless-iam-roles-per-function",
      "serverless-esbuild",
      "serverless-offline",
      "serverless-plugin-scripts"
    ],
    "pluginsData": {},
    "functions": {
      "gateway": {
        "handler": "src/functions/gateway.handler",
        "events": [
          {
            "httpApi": {
              "path": "/graphql",
              "method": "POST",
              "authorizer": "serviceAuthorizer"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/graphql"
          },
          {
            "httpApi": {
              "path": "/graphql",
              "method": "GET",
              "authorizer": "serviceAuthorizer"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/graphql"
          }
        ],
        "iamRoleStatementsName": "feature-flag-role-gateway",
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GatewayIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "feature-flag-dev-gateway",
        "package": {
          "artifact": "/Users/maxhill/code/personal/feature-flags/.serverless/feature-flag-dev-gateway.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GatewayLambdaVersionS4m1AL5kwtJbc8dEx6YgqoTV4gZVnanVtQT6rMr6g"
      },
      "hello": {
        "handler": "src/functions/hello.handler",
        "events": [
          {
            "http": {
              "path": "hello",
              "method": "post",
              "private": true,
              "integration": "AWS_PROXY"
            }
          },
          {
            "http": {
              "path": "hello",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "feature-flag-dev-hello",
        "package": {
          "artifact": "/Users/maxhill/code/personal/feature-flags/.serverless/feature-flag-dev-hello.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "HelloLambdaVersionQh28O4n9mX8D49jqRGKMUtJYk5qnaC1Lnhzqe6o4q0"
      },
      "buildSchema": {
        "handler": "src/functions/buildSchema.handler",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildSchemaLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "events": [
          {
            "http": {
              "path": "build-schema",
              "method": "get",
              "private": true,
              "integration": "AWS_PROXY"
            }
          }
        ],
        "iamRoleStatementsName": "feature-flag-role-buildSchema",
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildSchemaIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          },
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BuildSchemaIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][2]"
          }
        ],
        "name": "feature-flag-dev-buildSchema",
        "package": {
          "artifact": "/Users/maxhill/code/personal/feature-flags/.serverless/feature-flag-dev-buildSchema.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "BuildSchemaLambdaVersionT9XPWLhejB5xhqr03sWBmau1diYZPKIimM06PCvfQ"
      }
    },
    "resources": {
      "Resources": {
        "supergraphBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "feature-flag-dev-supergraph"
          }
        },
        "HttpApi": {
          "DependsOn": [
            "serviceUserPool"
          ]
        },
        "serviceUserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "service-user-pool-dev",
            "UsernameAttributes": [
              "email"
            ],
            "AutoVerifiedAttributes": [
              "email"
            ]
          }
        },
        "serviceUserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "service-user-pool-client-dev",
            "AllowedOAuthFlows": [
              "implicit"
            ],
            "AllowedOAuthFlowsUserPoolClient": true,
            "AllowedOAuthScopes": [
              "phone",
              "email",
              "openid",
              "profile",
              "aws.cognito.signin.user.admin"
            ],
            "UserPoolId": {
              "Ref": "serviceUserPool"
            },
            "CallbackURLs": [
              "https://localhost:3000"
            ],
            "ExplicitAuthFlows": [
              "ALLOW_USER_PASSWORD_AUTH",
              "ALLOW_REFRESH_TOKEN_AUTH"
            ],
            "GenerateSecret": false,
            "SupportedIdentityProviders": [
              "COGNITO"
            ]
          }
        },
        "serviceUserPoolDomain": {
          "Type": "AWS::Cognito::UserPoolDomain",
          "Properties": {
            "UserPoolId": {
              "Ref": "serviceUserPool"
            },
            "Domain": "service-user-pool-domain-dev-domainsuffixthatisunique"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "**/*.gql",
          "**/*.graphql"
        ]
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "layers": {
        "rover": {
          "path": "layers/rover",
          "name": "dev-rover-layer",
          "description": "Include rover-layer",
          "package": {
            "artifact": "/Users/maxhill/code/personal/feature-flags/.serverless/rover.zip"
          },
          "artifactAlreadyUploaded": true
        }
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {
      "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"layers\"]"
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/feature-flag/dev/1640106249502-2021-12-21T17:04:09.502Z",
    "artifact": ""
  }
}