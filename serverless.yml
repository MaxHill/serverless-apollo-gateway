service: feature-flag

provider:
  name: aws
  region: eu-north-1
  runtime: nodejs14.x
  stage: dev
  profile: 'feature-flags'
  lambdaHashingVersion: "20201221"
  environment: ${file(env.yml):${self:custom.stage}}
  apiGateway:
    apiKeys:
      - name: ${self:custom.stackName}-apiKey
        value: ${self:provider.environment.API_KEY}

  httpApi:
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${opt:region, self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

plugins:
  - serverless-iam-roles-per-function
  - serverless-esbuild
  - serverless-offline
  - serverless-plugin-scripts

package:
  individually: true
  patterns:
    - "**/*.gql"
    - "**/*.graphql"

custom:
  stage: "${opt:stage, self:provider.stage}"
  stackName: "${self:service}-${self:custom.stage}"
  scripts:
    hooks:
      'deploy:finalize': sls invoke -f buildSchema -s ${self:custom.stage}
  esbuild:
    loader:
      .yml: text
      .yaml: text
      .gql: text
      .graphql: text
  s3Buckets:
    supergraph:
      name: ${self:service}-${self:custom.stage}-supergraph
      arn:
        Fn::Join: ['', [
            Fn::GetAtt: [supergraphBucket,Arn],
            '/*'
        ]]

functions:
  gateway:
    handler: src/functions/gateway.handler
    events:
      - httpApi:
          path: /graphql
          method: POST
          authorizer: serviceAuthorizer
      - httpApi:
          path: /graphql
          method: GET
          authorizer: serviceAuthorizer
    iamRoleStatementsName: '${self:service}-role-gateway'
    iamRoleStatements:
      - Effect: 'Allow'
        Action: s3:GetObject
        Resource: ${self:custom.s3Buckets.supergraph.arn}

  hello:
    handler: src/functions/hello.handler
    events:
      - http:
          path: /hello
          method: POST
          private: true
      - http:
          path: /hello
          method: GET
          private: true

  buildSchema:
    handler: src/functions/buildSchema.handler
    layers:
      - { Ref: RoverLambdaLayer }
    events:
      - http:
          path: /build-schema
          method: GET
          private: true
    iamRoleStatementsName: '${self:service}-role-buildSchema'
    iamRoleStatements:
      - Effect: 'Allow'
        Action: s3:PutObject
        Resource: ${self:custom.s3Buckets.supergraph.arn}
      - Effect: 'Allow'
        Action: apigateway:GET
        Resource: arn:aws:apigateway:eu-north-1::/apikeys/*

layers:
  rover:
    path: layers/rover # required, path to layer contents on disk
    name: ${self:custom.stage}-rover-layer
    description: Include rover-layer

resources:
  Resources:
    supergraphBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Buckets.supergraph.name}

    HttpApi:
      DependsOn: serviceUserPool

    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${opt:stage, self:provider.stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: service-user-pool-client-${opt:stage, self:provider.stage}
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
          - aws.cognito.signin.user.admin
        UserPoolId:
          Ref: serviceUserPool
        CallbackURLs:
          - https://localhost:3000
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false
        SupportedIdentityProviders:
          - COGNITO

    serviceUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId:
          Ref: serviceUserPool
        Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}
