service: feature-flag

provider:
  name: aws
  region: eu-north-1
  runtime: nodejs14.x
  stage: dev
  profile: 'feature-flags'
  lambdaHashingVersion: "20201221"
  environment: ${file(env.yml):${self:custom.stage}}

plugins:
  - serverless-iam-roles-per-function
  - serverless-esbuild
  - serverless-offline
  - serverless-plugin-scripts

package:
  individually: true

custom:
  stage: "${opt:stage, self:provider.stage}"
  stackName: "${self:service}-${self:custom.stage}"
  #scripts:
  #  hooks:
  #    'deploy:finalize': sls invoke -f buildSchema -s ${self:custom.stage}
  esbuild:
    loader:
      .yml: text
      .yaml: text
  s3Buckets:
    supergraph:
      name: ${self:service}-${self:custom.stage}-supergraph
      arn:
        Fn::Join: ['', [
            Fn::GetAtt: [supergraphBucket,Arn],
            '/*'
        ]]
  userPool:
    pool:
      name: ${self:custom.stackName}-user-pool
    client:
      name: ${self:custom.userPool.pool.name}-client

functions:
  gateway:
    handler: src/functions/gateway.handler
    events:
      - http:
          path: /graphql
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
      - http:
          path: /graphql
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
    iamRoleStatementsName: '${self:service}-role-gateway'
    iamRoleStatements:
      - Effect: 'Allow'
        Action: s3:GetObject
        Resource: ${self:custom.s3Buckets.supergraph.arn}

  hello:
    handler: src/functions/hello.handler
    events:
      - http:
          path: hello
          method: post
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true
      - http:
          path: hello
          method: get
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors: true

  buildSchema:
    handler: src/functions/buildSchema.handler
    layers:
      - { Ref: RoverLambdaLayer }
    events:
      - http:
          path: build-schema
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    iamRoleStatementsName: '${self:service}-role-buildSchema'
    iamRoleStatements:
      - Effect: 'Allow'
        Action: s3:PutObject
        Resource: ${self:custom.s3Buckets.supergraph.arn}

layers:
  rover:
    path: layers/rover # required, path to layer contents on disk
    name: ${self:custom.stage}-rover-layer
    description: Include rover-layer

resources:
  Resources:
    supergraphBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Buckets.supergraph.name}

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.userPool.pool.name}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPool.client.name}
        UserPoolId:
          Ref: CognitoUserPool
        ExplicitAuthFlows:
          - USER_PASSWORD_AUTH
        GenerateSecret: false

    CognitoMachinePoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.userPool.client.name}-machine
        UserPoolId:
          Ref: CognitoUserPool
        AllowedOAuthFlows:
          - client_credentials
        GenerateSecret: true

    CognitoUserPoolDomain:
        Type: AWS::Cognito::UserPoolDomain
        Properties:
          UserPoolId: !Ref CognitoUserPool
          Domain: "randomstringusedasdomain"

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        AuthorizerResultTtlInSeconds: 300
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        Name: Authorizer
        ProviderARNs:
          - Fn::GetAtt:
                - CognitoUserPool
                - Arn

  # Print out the Id of the Identity Pool that is created
  Outputs:
    UserPoolId:
      Value:
        Ref: CognitoUserPool

    UserPoolClientId:
      Value:
        Ref: CognitoUserPoolClient